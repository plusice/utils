<?xml version="1.0" encoding="UTF-8"?>

<project name="minify-static-file" default="all">

    <description>Minify Static Files</description>
    <dirname property="current.dir" file="${ant.file}" />
    <property name="webroot.dir" location="${current.dir}" />
    <property name="dir.html" location="${webroot.dir}/views" />
    <property name="dir.js" location="${webroot.dir}/js" />
    <property name="tmp.dir" location="${webroot.dir}/tmp" />
    <property name="tmp.dir.html" location="${tmp.dir}/views" />
    <property name="tmp.dir.js" location="${tmp.dir}/js" />
    <property name="tmp.dir.css" location="${tmp.dir}/css" />
    <property name="html.manifest" value="KingFisher.appcache" />
    <property name="googleclosure.path" location="${current.dir}/tools/googleclosure.jar" />
    <property name="htmlcompressor.path" location="${current.dir}/tools/htmlcompressor-1.5.3.jar" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${current.dir}/tools/ant-contrib-1.0b5-SNAPSHOT.jar"/>
        </classpath>
    </taskdef>

    <target name="all" depends="css,js,html,manifest,cover" />
    <target name="js" depends="patch,concat-js,ng-annotate,compress-js"/>
    <target name="html" depends="haml2html,compress-html,html2js"/>
    <target name="css" description="编译sass">
        <echo message="编译sass..." />
        <exec executable="compass" dir="${webroot.dir}" failonerror="true">
            <arg value="compile" />
            <arg value="--output-style=compressed" />
            <arg value="--css-dir=${tmp.dir.css}" />
        </exec>
    </target>


    <!-- angular补丁,对angular源码进行修改 -->
    <target name="patch">
        <patch patchfile="js/patch/angular.patch" strip="1"/>
        <patch patchfile="js/patch/ui-bootstrap-tpl.patch" strip="1"/>
    </target>

    <!-- haml to html,除了index.html,其他的后缀.src.html,因为后面要做压缩 -->
    <target name="haml2html">
        <echo message="编译haml..." />
        <copy todir="${tmp.dir.html}/" failonerror="true">
            <fileset dir="${dir.html}/">
                <type type="dir"/>
            </fileset>
        </copy>
        <apply executable="haml" verbose="true" failonerror="true" parallel="false">
            <!-- includes对应from -->
            <fileset dir="${dir.html}" includes="**/*.haml" />
            <arg value="-t"/>
            <arg value="ugly"/>
            <arg value="--trace"/>
            <srcfile/>
            <targetfile/>
            <mapper type="glob" from="*.haml" to="${tmp.dir.html}/*.src.html" />
        </apply>
        <!-- index.haml需对script标签进行替换,这里必须对index.haml进行转换 -->
        <apply executable="haml" verbose="true" failonerror="true" parallel="false" force="true">
            <fileset dir="${dir.html}" includes="index.haml" />
            <arg value="-t"/>
            <arg value="ugly"/>
            <arg value="--trace"/>
            <srcfile/>
            <targetfile/>
            <mapper type="glob" from="*.haml" to="${tmp.dir.html}/*.html" />
        </apply>
    </target>

    <!-- compress .src.html -->
    <target name="compress-html" depends="haml2html">
        <apply executable="java" verbose="true" failonerror="true" parallel="false">
            <fileset dir="${tmp.dir.html}/" includes="**/*.src.html" excludes="index.html" />
            <arg value="-jar"/>
            <arg value="${htmlcompressor.path}"/>
            <arg value="--remove-intertag-spaces"/>
            <arg value="--type"/>
            <arg value="html"/>
            <srcfile/>
            <arg value="-o"/>
            <mapper type="glob" from="*.src.html" to="${tmp.dir.html}/*.html" />
            <targetfile/>
        </apply>
        <!-- 删除多余的.src.html文件 -->
        <delete>
            <fileset dir="${tmp.dir}" includes="views/**/*.src.html"/>
        </delete>
    </target>

    <!-- convert html to js template,anguar模板引用路径是带views的,所以includes要带views -->
    <target name="html2js" depends="haml2html,compress-html">
        <apply executable="ng-html2js" dir="${tmp.dir}" verbose="true" failonerror="true" parallel="false" relative="true">
            <fileset dir="${tmp.dir}" includes="views/**/*.html"/>
            <srcfile/>
            <targetfile/>
            <mapper type="glob" from="*.html" to="${tmp.dir}/*.html.js"/>
            <arg value="-m"/>
            <arg value="KingFisherTpl"/>
            <arg value="--module-var"/>
            <arg value="kingFisherTpl"/>
        </apply>
    </target>


    <!-- concat javascript file according to the script tag in index.html -->
    <target name="concat-js" depends="haml2html,html2js">
        <!--
            html写法:
            \<!\-\- build:xxx.js \-\-\>
            <script src="a.js"></script>
            <script src="b.js"></script>
            \<!\-\- xxx.js:build \-\-\>
         -->
        <!-- 提取所有script标签的url,和含有build:xxx或xxx:build的注释里面的内容 -->
        <loadfile srcFile="${tmp.dir.html}/index.html" property="js.concat.alllist">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="(&lt;script.*src[^&gt;]*&gt;)|(&lt;\!\-\-[\s]*build:[^&gt;]*\-\-&gt;)|(&lt;\!\-\-[\s]*[\S]+:build[^&gt;]*\-\-&gt;)" />
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex pattern=".*&lt;script.*src=[&quot;']?([^&gt;&quot;']*).*&gt;[^&lt;]*" replace="\1" flags="gi" />
                    <replaceregex pattern=".*&lt;\!\-\-[\s]*build:([\S]+)[^&gt;]*\-\-&gt;" replace="\1build:" flags="gi" />
                    <replaceregex pattern=".*&lt;\!\-\-[\s]*([\S]+):build[^&gt;]*\-\-&gt;" replace="\1:build" flags="gi" />
                </tokenfilter>
                <prefixlines prefix="${webroot.dir}/"/>
                <suffixlines suffix="," />
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <!-- 提取注释build:xxx里要进行合并的javascript目标url(没法使用replace从js.concat.alllist过滤build:字符,只能再新建一个列表) -->
        <loadfile srcFile="${tmp.dir.html}/index.html" property="js.concat.destlist">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="&lt;\!\-\-[\s]*build:[^&gt;]*\-\-&gt;" />
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex pattern=".*&lt;\!\-\-[\s]*build:([\S]+)[^&gt;]*\-\-&gt;" replace="\1" flags="gi" />
                </tokenfilter>
                <suffixlines suffix="," />
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <!-- 要进行合并的脚本list -->
        <var name="js.concat.src" value=""/>
        <!-- 遍历所有script标签的url和build标签,将build:和:build之间的url进行合并 -->
        <for list="${js.concat.alllist}" param="item">
            <sequential>
                <if>
                <!-- 包含build:或者:build -->
                <contains string="@{item}" substring="build" />
                <then>
                    <if>
                    <!-- build:后面元素需要进行合并 -->
                    <contains string="@{item}" substring="build:" />
                    <then>
                        <var name="js.concat.need" value="true" />
                        <!-- 设置当前要合并的目标文件,包含"build:"字符 -->
                        <var name="js.concat.dest" value="@{item}"/>
                    </then>
                    <else>
                        <!-- :build后面元素不需进行合并 -->
                        <var name="js.concat.need" value="false" />

                        <!-- 对js.concat.src进行合并 -->
                        <for list="${js.concat.destlist}" param="desturl">
                            <sequential>
                                <if>
                                    <contains string="${js.concat.dest}" substring="@{desturl}" />
                                    <then>
                                        <concat destfile="${tmp.dir}/@{desturl}">
                                            <filelist files="${js.concat.src}"/>
                                        </concat>
                                        <!-- 输出合并目标文件 -->
                                        <echo message="${tmp.dir}/@{desturl}" />
                                    </then>
                                </if>
                            </sequential>
                        </for>

                        <!-- 清空js.concat.src -->
                        <var name="js.concat.src" value=""/>
                    </else>
                    </if>
                </then>
                <else>
                    <if>
                    <!-- 需要合并的脚本push进js.concat.src -->
                    <equals arg1="${js.concat.need}" arg2="true" />
                    <then>
                        <var name="js.concat.src" value="${js.concat.src}@{item},"/>
                    </then>
                    </if>
                </else>
                </if>
            </sequential>
        </for>
        <!-- concat template -->
        <concat destfile="${tmp.dir.js}/templatejs.min.js">
            <fileset dir="${tmp.dir.html}" includes="**/*.html.js"/>
        </concat>
        <echo message="${tmp.dir.js}/templatejs.min.js" />

        <!-- 删除多余的html.js文件 -->
        <delete>
            <fileset dir="${tmp.dir.html}" includes="**/*.html.js"/>
        </delete>
    </target>


    <!-- ng-annotate 压缩预处理，第一个合并的脚本不进行处理  -->
    <target name="ng-annotate" depends="concat-js">
        <var name="annotate_index" value="1"/>
        <for list="${js.concat.destlist}" param="concatedjs">
            <sequential>
                <if>
                    <equals arg1="${annotate_index}" arg2="1" />
                    <then>
                    </then>
                    <else>
                        <exec executable="ng-annotate">
                            <arg value="-ar"/>
                            <arg value="${tmp.dir}/@{concatedjs}"/>
                            <arg value="-o"/>
                            <arg value="${tmp.dir}/@{concatedjs}"/>
                        </exec>
                    </else>
                </if>
                <math result="annotate_index" operand1="${annotate_index}" operation="+" operand2="1" datatype="int" />
            </sequential>
        </for>

    </target>


    <!-- compress js，第一个合并的脚本(库)只进行whitespace压缩,使用ng-animation用过高压缩会出问题 -->
    <target name="compress-js" depends="concat-js,ng-annotate">

        <var name="concat_index" value="1"/>
        <!-- 压缩concat-js中合并的js文件,重写html的script标签 -->
        <for list="${js.concat.destlist}" param="concatedjs">

            <sequential>
                <!-- 拷贝要压缩的文件 -->
                <copy file="${tmp.dir}/@{concatedjs}" tofile="${tmp.dir}/tmp/@{concatedjs}"/>
                <if>
                    <equals arg1="${concat_index}" arg2="1" />
                    <then>
                        <echo message="@{concatedjs}" />
                        <!-- 压缩index.html抽取的文件 -->
                        <java jar="${googleclosure.path}" fork="true" failonerror="true">
                            <arg value="--warning_level"/>
                            <arg value="quiet"/>
                            <arg value="--angular_pass"/>
                            <arg value="--language_in=ECMASCRIPT5"/>
                            <arg value="--compilation_level=WHITESPACE_ONLY"/>
                            <arg value="--formatting=SINGLE_QUOTES"/>
                            <arg value="--js=${tmp.dir}/tmp/@{concatedjs}"/>
                            <!-- js_output_file目标路径不存在会报错 -->
                            <arg value="--js_output_file=${tmp.dir}/@{concatedjs}"/>
                        </java>
                    </then>
                    <else>
                        <echo message="@{concatedjs}" />
                        <!-- 压缩index.html抽取的文件 -->
                        <java jar="${googleclosure.path}" fork="true" failonerror="true">
                            <arg value="--warning_level"/>
                            <arg value="quiet"/>
                            <arg value="--angular_pass"/>
                            <arg value="--language_in=ECMASCRIPT5"/>
                            <arg value="--compilation_level=SIMPLE_OPTIMIZATIONS"/>
                            <arg value="--formatting=SINGLE_QUOTES"/>
                            <arg value="--js=${tmp.dir}/tmp/@{concatedjs}"/>
                            <!-- js_output_file目标路径不存在会报错 -->
                            <arg value="--js_output_file=${tmp.dir}/@{concatedjs}"/>
                        </java>
                    </else>
                </if>

                <!-- 重写index.html的script标签 -->
                <replaceregexp
                match="&lt;!--[\s]*build:@{concatedjs} [\d\w\s\W]*&lt;script.*src=['&quot;]?(.*)['&quot;]?\s*&gt;\s*&lt;/script&gt;[\d\w\s\W]*&lt;!--[\s]*@{concatedjs}:build[\s]*--&gt;"
                replace="&lt;script src=&quot;/@{concatedjs}&quot;&gt;&lt;/script&gt;"
                flags="gs">
                    <fileset dir="${tmp.dir.html}" includes="index.html" />
                </replaceregexp>

                <math result="concat_index" operand1="${concat_index}" operation="+" operand2="1" datatype="int" />
            </sequential>
        </for>

        <!-- 压缩js template -->
        <copy file="${tmp.dir.js}/templatejs.min.js" tofile="${tmp.dir}/tmp/js/templatejs.min.js" failonerror="true"/>
        <java jar="${googleclosure.path}" fork="true" failonerror="true">
            <arg value="--warning_level"/>
            <arg value="quiet"/>
            <arg value="--angular_pass"/>
            <arg value="--language_in=ECMASCRIPT5"/>
            <arg value="--compilation_level=SIMPLE_OPTIMIZATIONS"/>
            <arg value="--formatting=SINGLE_QUOTES"/>
            <arg value="--js=${tmp.dir}/tmp/js/templatejs.min.js"/>
            <arg value="--js_output_file=${tmp.dir.js}/templatejs.min.js"/>
        </java>
        <!-- index.html写入templatejs.min.js引用 -->
        <replaceregexp
        match="&lt;!--[\s]*templatejs[\s]*--&gt;"
        replace="&lt;script src=&quot;/js/templatejs\.min\.js&quot;&gt;&lt;/script&gt;"
        flags="gs">
            <fileset dir="${tmp.dir.html}" includes="index.html" />
        </replaceregexp>

        <!-- index.html删除test文件 -->
        <replaceregexp
        match="&lt;!--[\s]*test:js [\d\w\s\W]*&lt;script.*src=['&quot;]?(.*)['&quot;]?\s*&gt;\s*&lt;/script&gt;[\d\w\s\W]*&lt;!--[\s]*endtest[\s]*--&gt;"
        replace=""
        flags="gs">
            <fileset dir="${tmp.dir.html}" includes="index.html" />
        </replaceregexp>

        <!-- 删除拷贝的文件 -->
        <delete dir="${tmp.dir}/tmp/"/>
    </target>


    <!-- 添加manifest缓存 -->
    <target name="cachefile">
        <echo file="${tmp.dir}/${html.manifest}" append="false">CACHE MANIFEST
/js/lib.min.js
/js/myapp.min.js
/js/templatejs.min.js
/css/style.css
/img/ui/bird.png
/img/ui/logo.jpg
/fonts/icon.woff
/fonts/opensans_regular.woff

NETWORK:
*
        </echo>
    </target>
    <target name="manifest" depends="cachefile">
        <!-- 获取版本号 -->
        <exec executable="git" dir="${webroot.dir}" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="rev-list" />
            <arg value="HEAD" />
            <arg value="-1" />
        </exec>

        <!-- 获取提交时间 -->
        <exec executable="git" dir="${webroot.dir}" outputproperty="git.time" failifexecutionfails="false" errorproperty="">
            <arg value="show" />
            <arg value="-s" />
            <arg value="--format=%ci" />
        </exec>

        <!-- 修改manifest文件的版本号信息和修改时间,如果存在版本信息和修改时间就替换,不存在就append -->
        <echo message="更新appcache文件..." />
        <loadfile srcFile="${tmp.dir}/${html.manifest}" property="html.manifest.msg">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="\#\srevision" />
                </linecontainsregexp>
            </filterchain>
        </loadfile>
        <if>
        <contains string="${html.manifest.msg}" substring="revision" />
        <then>
            <replaceregexp
            match="(\#\srevision\:).*(\n\#\scommited\:).*"
            replace="\1${git.revision}\2${git.time}"
            flags="gs">
                <fileset dir="${tmp.dir}/" includes="${html.manifest}" />
            </replaceregexp>
        </then>
        <else>
            <echo file="${tmp.dir}/${html.manifest}" append="true">
# revision:${git.revision}
# commited:${git.time}
            </echo>
        </else>
        </if>

        <!-- index.html添加manifest标识 -->
        <echo message="添加html的manifest标识..." />
        <replaceregexp
        match="(&lt;\!DOCTYPE html&gt;\s*[\n]?\s*&lt;)html"
        replace="\1html manifest='/${html.manifest}'"
        flags="gs">
            <fileset dir="${tmp.dir.html}" includes="index.html" />
        </replaceregexp>

    </target>

    <!-- temp覆盖webroot,清除temp -->
    <target name="cover">
        <copy todir="${webroot.dir}/" failonerror="true" overwrite="true">
            <fileset dir="${tmp.dir}/"/>
        </copy>
    </target>
    <target name="clean">
        <delete dir="${tmp.dir}/"/>
    </target>


    <target name="dev" depends="patch">
        <apply executable="haml" verbose="true" failonerror="true" parallel="false">
            <!-- includes对应from -->
            <fileset dir="${dir.html}" includes="**/*.haml" />
            <arg value="-t"/>
            <arg value="ugly"/>
            <arg value="--trace"/>
            <srcfile/>
            <targetfile/>
            <mapper type="glob" from="*.haml" to="${dir.html}/*.html" />
        </apply>
        <exec executable="compass" dir="${webroot.dir}" failonerror="true">
            <arg value="compile" />
        </exec>

    </target>
</project>
