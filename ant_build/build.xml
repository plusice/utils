<?xml version="1.0"?>

<project name="minify-static-file" default="all">

    <description>Minify Static Files</description>
    <dirname property="current.dir" file="${ant.file}" />
    <property name="webroot.dir" location="${current.dir}" />
    <property name="html.dir" location="${webroot.dir}/views" />
    <property name="tmp.dir" location="${current.dir}/tmp" />
    <property name="js.dir" location="${webroot.dir}/js" />
    <property name="googleclosure.path" location="${current.dir}/tools/googleclosure.jar" />
    <property name="htmlcompressor.path" location="${current.dir}/tools/htmlcompressor-1.5.3.jar" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${current.dir}/tools/ant-contrib-1.0b5-SNAPSHOT.jar"/>
        </classpath>
    </taskdef>

    <!-- 将需要处理的文件备份进行处理,处理完再执行clean任务覆盖可发布的文件 -->
    <target name="copytmp">
        <echo message="copy tmp..." />
        <copy todir="${tmp.dir}/views">
            <fileset dir="${webroot.dir}/views"/>
        </copy>
        <copy todir="${tmp.dir}/js">
            <fileset dir="${webroot.dir}/js"/>
        </copy>
        <copy todir="${tmp.dir}/bower_components">
            <fileset dir="${webroot.dir}/bower_components"/>
        </copy>
        <copy todir="${tmp.dir}/sass">
            <fileset dir="${webroot.dir}/sass"/>
        </copy>
        <copy file="${webroot.dir}/config.rb" tofile="${tmp.dir}/config.rb"/>
    </target>

    <target name="all" depends="copytmp,css,js,html,clean" />
    <target name="js" depends="copytmp,concat-js,compress-js"/>
    <target name="html" depends="copytmp,haml2html,compress-html"/>
    <target name="css" depends="copytmp" description="编译sass">
        <echo message="编译sass..." />
        <exec executable="compass" dir="${tmp.dir}">
            <arg value="compile" />
        </exec>
    </target>

    <!-- haml to html -->
    <target name="haml2html">
        <echo message="编译haml..." />
        <apply executable="haml" verbose="true" failonerror="true" parallel="false">
            <!-- mapper的输入不包括fileset的dir,所以不要把views/写在dir中,这样mapper的输出就不用写views/了 -->
            <fileset dir="${tmp.dir}" includes="views/**/*.haml" />
            <srcfile/>
            <targetfile/>
            <mapper type="glob" from="*.haml" to="*.html" />
        </apply>
        <!-- index.haml需对script标签进行替换,这里必须对index.haml进行转换 -->
        <apply executable="haml" verbose="true" failonerror="true" parallel="false" force="true">
            <fileset dir="${tmp.dir}" includes="views/index.haml" />
            <srcfile/>
            <targetfile/>
            <mapper type="glob" from="views/index.haml" to="views/index.html" />
        </apply>
    </target>

    <!-- compress html -->
    <target name="compress-html" depends="haml2html">
        <!-- 压缩无法覆盖本身,需拷贝一份进行压缩 -->
        <copy todir="${html.dir}/tmp/">
            <fileset dir="${html.dir}"/>
        </copy>
        <apply executable="java" verbose="true" failonerror="true" parallel="false">
            <fileset dir="${html.dir}/tmp/" includes="**/*.html"/>
            <arg value="-jar"/>
            <arg value="${htmlcompressor.path}"/>
            <arg value="--remove-intertag-spaces"/>
            <arg value="--type"/>
            <arg value="html"/>
            <srcfile/>
            <arg value="-o"/>
            <mapper type="glob" from="*" to="${html.dir}/*" />
            <targetfile/>
        </apply>
        <delete dir="${html.dir}/tmp/" />
    </target>

    <!-- concat javascript file according to the script tag in index.html -->
    <target name="concat-js" depends="haml2html">
        <!--
            html写法:
            \<!\-\- build:xxx.js \-\-\>
            <script src="a.js"></script>
            <script src="b.js"></script>
            \<!\-\- xxx.js:build \-\-\>
         -->
        <!-- 提取所有script标签的url,和含有build:xxx或xxx:build的注释里面的内容 -->
        <loadfile srcFile="${html.dir}/index.html" property="js.concat.alllist">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="(&lt;script.*src[^&gt;]*&gt;)|(&lt;\!\-\-[\s]*build:[^&gt;]*\-\-&gt;)|(&lt;\!\-\-[\s]*[\S]+:build[^&gt;]*\-\-&gt;)" />
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex pattern=".*&lt;script.*src=[&quot;']?([^&gt;&quot;']*).*&gt;[^&lt;]*" replace="\1" flags="gi" />
                    <replaceregex pattern=".*&lt;\!\-\-[\s]*build:([\S]+)[^&gt;]*\-\-&gt;" replace="\1build:" flags="gi" />
                    <replaceregex pattern=".*&lt;\!\-\-[\s]*([\S]+):build[^&gt;]*\-\-&gt;" replace="\1:build" flags="gi" />
                </tokenfilter>
                <prefixlines prefix="${tmp.dir}/"/>
                <suffixlines suffix="," />
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <!-- 提取注释build:xxx里要进行合并的javascript目标url(没法使用replace从js.concat.alllist过滤build:字符,只能再新建一个列表) -->
        <loadfile srcFile="${html.dir}/index.html" property="js.concat.destlist">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="&lt;\!\-\-[\s]*build:[^&gt;]*\-\-&gt;" />
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex pattern=".*&lt;\!\-\-[\s]*build:([\S]+)[^&gt;]*\-\-&gt;" replace="\1" flags="gi" />
                </tokenfilter>
                <suffixlines suffix="," />
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <!-- 要进行合并的脚本list -->
        <var name="js.concat.src" value=""/>
        <!-- 遍历所有script标签的url和build标签,将build:和:build之间的url进行合并 -->
        <for list="${js.concat.alllist}" param="item">
            <sequential>
                <if>
                <!-- 包含build:或者:build -->
                <contains string="@{item}" substring="build" />
                <then>
                    <if>
                    <!-- build:后面元素需要进行合并 -->
                    <contains string="@{item}" substring="build:" />
                    <then>
                        <var name="js.concat.need" value="true" />
                        <!-- 设置当前要合并的目标文件,包含"build:"字符 -->
                        <var name="js.concat.dest" value="@{item}"/>
                    </then>
                    <else>
                        <!-- :build后面元素不需进行合并 -->
                        <var name="js.concat.need" value="false" />

                        <!-- 对js.concat.src进行合并 -->
                        <for list="${js.concat.destlist}" param="desturl">
                            <sequential>
                                <if>
                                    <contains string="${js.concat.dest}" substring="@{desturl}" />
                                    <then>
                                        <concat destfile="${tmp.dir}/@{desturl}">
                                            <filelist files="${js.concat.src}"/>
                                        </concat>
                                        <!-- 输出合并目标文件 -->
                                        <echo message="${tmp.dir}/@{desturl}" />
                                    </then>
                                </if>
                            </sequential>
                        </for>

                        <!-- 清空js.concat.src -->
                        <var name="js.concat.src" value=""/>
                    </else>
                    </if>
                </then>
                <else>
                    <if>
                    <!-- 需要合并的脚本push进js.concat.src -->
                    <equals arg1="${js.concat.need}" arg2="true" />
                    <then>
                        <var name="js.concat.src" value="${js.concat.src}@{item},"/>
                    </then>
                    </if>
                </else>
                </if>
            </sequential>
        </for>
    </target>

    <!-- compress js -->
    <target name="compress-js" depends="concat-js">
        <!-- 压缩concat-js中合并的js文件,重写html的script标签 -->
        <for list="${js.concat.destlist}" param="concatedjs">
            <sequential>
                <!-- 拷贝要压缩的文件 -->
                <copy file="${tmp.dir}/@{concatedjs}" tofile="${tmp.dir}/tmp/@{concatedjs}"/>
                <!-- 压缩index.html抽取的文件 -->
                <java jar="${googleclosure.path}" fork="true" failonerror="true">
                    <arg value="--warning_level"/>
                    <arg value="quiet"/>
                    <arg value="--angular_pass"/>
                    <arg value="--language_in=ECMASCRIPT5"/>
                    <arg value="--compilation_level=WHITESPACE_ONLY"/>
                    <arg value="--formatting=SINGLE_QUOTES"/>
                    <arg value="--js=${tmp.dir}/tmp/@{concatedjs}"/>
                    <!-- js_output_file目标路径不存在会报错 -->
                    <arg value="--js_output_file=${tmp.dir}/@{concatedjs}"/>
                </java>

                <!-- 重写index.html的script标签 -->
                <replaceregexp
                match="&lt;!--[\s]*build:@{concatedjs} [\d\w\s\W]*&lt;script.*src=['&quot;]?(.*)['&quot;]?\s*&gt;\s*&lt;/script&gt;[\d\w\s\W]*&lt;!--[\s]*@{concatedjs}:build[\s]*--&gt;"
                replace="&lt;script src=&quot;/@{concatedjs}&quot;&gt;&lt;/script&gt;"
                flags="gs">
                    <fileset dir="${html.dir}" includes="index.html" />
                </replaceregexp>
            </sequential>
        </for>

        <!-- 删除拷贝的文件 -->
        <delete dir="${tmp.dir}/tmp/"/>
    </target>
    <target name="clean">
        <!-- 删除多余的html.js文件 -->
        <delete>
            <fileset dir="${tmp.dir}/views" includes="**/*.html.js"/>
        </delete>
        <copy todir="${webroot.dir}/">
            <fileset dir="${tmp.dir}/"/>
        </copy>
        <delete dir="${tmp.dir}/"/>
    </target>
</project>

